"""
API –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏–π –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∞–º–∏
"""

from fastapi import APIRouter, HTTPException, Depends
from typing import List
from datetime import datetime
from pydantic import BaseModel
from src.utils.jwt_handler import get_token, decode_access_token
import requests
from config import BITRIX_DOMAIN, BITRIX_TOKEN

router = APIRouter()

# –ú–æ–¥–µ–ª–∏
class CreateAppealData(BaseModel):
    appeal_type: str
    title: str
    comment: str
    files: List[dict] = []

class AppealResponse(BaseModel):
    deal_id: str
    title: str
    stage_name: str
    created_at: datetime
    message: str

class DealStatus(BaseModel):
    id: str
    title: str
    stage_id: str
    stage_name: str
    created_at: str
    opportunity: str
    status_color: str = "bg-blue-50 text-blue-700 border-blue-200"
    status_icon: str = "üìù"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
APPEAL_TYPE_MAPPING = {
    "DEBTOR": {"category_id": "1", "title_prefix": "–î–µ–±–∏—Ç–æ—Ä—Å–∫–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å: "},
    "GENERAL": {"category_id": "0", "title_prefix": "–û–±—â–∏–π –≤–æ–ø—Ä–æ—Å: "}
}

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def get_status_style(stage_name: str) -> tuple[str, str]:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–≤–µ—Ç –∏ –∏–∫–æ–Ω–∫—É –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞"""
    stage_name_lower = stage_name.lower()
    
    if any(word in stage_name_lower for word in ['–Ω–æ–≤', '—Å–æ–∑–¥–∞–Ω']):
        return "bg-blue-50 text-blue-700 border-blue-200", "üìù"
    elif any(word in stage_name_lower for word in ['–ø–æ–¥–≥–æ—Ç–æ–≤–∫', '–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω']):
        return "bg-yellow-50 text-yellow-700 border-yellow-200", "‚öôÔ∏è"
    elif any(word in stage_name_lower for word in ['–æ–ø–ª–∞—Ç', '—Å—á–µ—Ç']):
        return "bg-orange-50 text-orange-700 border-orange-200", "üí∞"
    elif any(word in stage_name_lower for word in ['–≤—ã–ø–æ–ª–Ω–µ–Ω', '–≤ —Ä–∞–±–æ—Ç–µ']):
        return "bg-indigo-50 text-indigo-700 border-indigo-200", "üöÄ"
    elif any(word in stage_name_lower for word in ['–∑–∞–≤–µ—Ä—à–µ–Ω', '–≤—ã–∏–≥—Ä–∞–Ω']):
        return "bg-green-50 text-green-700 border-green-200", "‚úÖ"
    elif any(word in stage_name_lower for word in ['–ø—Ä–æ–∏–≥—Ä–∞–Ω', '–æ—Ç–∫–ª–æ–Ω–µ–Ω']):
        return "bg-red-50 text-red-700 border-red-200", "‚ùå"
    else:
        return "bg-gray-50 text-gray-700 border-gray-200", "üìù"

async def get_stages_map() -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –º–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤ ID -> –ù–∞–∑–≤–∞–Ω–∏–µ"""
    try:
        response = requests.get(
            f"https://{BITRIX_DOMAIN}/rest/1/{BITRIX_TOKEN}/crm.status.list.json",
            params={"filter[ENTITY_ID]": "DEAL_STAGE"}
        )
        response.raise_for_status()
        
        stages = response.json().get("result", [])
        return {
            stage["STATUS_ID"]: stage["NAME"]
            for stage in stages
            if stage.get("STATUS_ID") and stage.get("NAME")
        }
    except:
        return {}

async def get_deals_with_stages(contact_id: str, closed_filter: str = None) -> List[DealStatus]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–¥–µ–ª–∫–∏ —Å —Å—Ç–∞—Ç—É—Å–∞–º–∏"""
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    params = {
        "filter[CONTACT_ID]": contact_id,
        "select[]": ["ID", "TITLE", "STAGE_ID", "OPPORTUNITY", "DATE_CREATE"],
        "order[DATE_CREATE]": "DESC"
    }
    if closed_filter:
        params["filter[CLOSED]"] = closed_filter
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–¥–µ–ª–∫–∏
    deals_response = requests.get(
        f"https://{BITRIX_DOMAIN}/rest/1/{BITRIX_TOKEN}/crm.deal.list.json",
        params=params
    )
    deals_response.raise_for_status()
    deals = deals_response.json().get("result", [])
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã
    stages_map = await get_stages_map()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result = []
    for deal in deals:
        stage_id = deal.get("STAGE_ID", "")
        stage_name = stages_map.get(stage_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        status_color, status_icon = get_status_style(stage_name)
        
        result.append(DealStatus(
            id=deal["ID"],
            title=deal["TITLE"],
            stage_id=stage_id,
            stage_name=stage_name,
            created_at=deal["DATE_CREATE"],
            opportunity=deal.get("OPPORTUNITY", "0"),
            status_color=status_color,
            status_icon=status_icon
        ))
    
    return result

# API endpoints
@router.get("/stages")
async def get_deal_stages():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ —Å–¥–µ–ª–æ–∫"""
    try:
        stages_map = await get_stages_map()
        stages = [
            {"id": k, "name": v, "sort": 0}
            for k, v in stages_map.items()
        ]
        return {"stages": stages, "total": len(stages)}
    except requests.RequestException as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ Bitrix24: {str(e)}")

@router.get("/current", response_model=List[DealStatus])
async def get_current_deals(token: str = Depends(get_token)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫"""
    try:
        user_data = decode_access_token(token)
        contact_id = user_data.get("contact_id")
        if not contact_id:
            raise HTTPException(status_code=400, detail="–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç contact_id")
        
        return await get_deals_with_stages(contact_id, "N")
    except requests.RequestException as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ Bitrix24: {str(e)}")

@router.get("/history", response_model=List[DealStatus])
async def get_deals_history(token: str = Depends(get_token)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤—Å–µ—Ö —Å–¥–µ–ª–æ–∫"""
    try:
        user_data = decode_access_token(token)
        contact_id = user_data.get("contact_id")
        if not contact_id:
            raise HTTPException(status_code=400, detail="–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç contact_id")
        
        return await get_deals_with_stages(contact_id)
    except requests.RequestException as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ Bitrix24: {str(e)}")

@router.post("/create", response_model=AppealResponse)
async def create_appeal(appeal_data: CreateAppealData, token: str = Depends(get_token)):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è"""
    try:
        user_data = decode_access_token(token)
        contact_id = user_data.get("contact_id")
        if not contact_id:
            raise HTTPException(status_code=400, detail="–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç contact_id")
        
        appeal_config = APPEAL_TYPE_MAPPING.get(appeal_data.appeal_type)
        if not appeal_config:
            raise HTTPException(status_code=400, detail="–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è")
        
        # –°–æ–∑–¥–∞–µ–º —Å–¥–µ–ª–∫—É
        deal_fields = {
            "TITLE": appeal_config["title_prefix"] + appeal_data.title,
            "CONTACT_ID": contact_id,
            "STAGE_ID": "NEW",  # –ü—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± - –∏—Å–ø–æ–ª—å–∑—É–µ–º "NEW"
            "CATEGORY_ID": appeal_config["category_id"],
            "COMMENTS": appeal_data.comment,
            "OPPORTUNITY": "0",
            "CURRENCY_ID": "RUB",
            "OPENED": "Y",
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–∞–Ω–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
        company_id = user_data.get("company_id")
        if company_id:
            from database import connect_to_db
            conn = connect_to_db()
            cursor = conn.cursor(dictionary=True)
            cursor.execute("SELECT bitrix_company_id FROM companies WHERE id = %s", (company_id,))
            company_data = cursor.fetchone()
            cursor.close()
            conn.close()
            
            if company_data and company_data.get("bitrix_company_id"):
                deal_fields["COMPANY_ID"] = company_data["bitrix_company_id"]
        
        # –°–æ–∑–¥–∞–µ–º —Å–¥–µ–ª–∫—É
        response = requests.post(
            f"https://{BITRIX_DOMAIN}/rest/1/{BITRIX_TOKEN}/crm.deal.add.json",
            json={"fields": deal_fields}
        )
        response.raise_for_status()
        
        deal_id = str(response.json().get("result"))
        if not deal_id:
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        activity_fields = {
            "OWNER_TYPE_ID": 2,
            "OWNER_ID": deal_id,
            "TYPE_ID": 4,
            "SUBJECT": "–°–æ–∑–¥–∞–Ω–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ",
            "DESCRIPTION": appeal_data.comment,
            "COMPLETED": "Y",
            "AUTHOR_ID": contact_id,
        }
        
        if appeal_data.files:
            activity_fields["FILES"] = [
                {"fileData": [file.name, file.base64]} 
                for file in appeal_data.files
            ]
        
        requests.post(
            f"https://{BITRIX_DOMAIN}/rest/1/{BITRIX_TOKEN}/crm.activity.add.json",
            json={"fields": activity_fields}
        )
        
        return AppealResponse(
            deal_id=deal_id,
            title=deal_fields["TITLE"],
            stage_name="–ù–æ–≤–∞—è",
            created_at=datetime.now(),
            message="–û–±—Ä–∞—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ"
        )
        
    except requests.RequestException as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ Bitrix24: {str(e)}")
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")