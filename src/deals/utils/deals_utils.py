import requests
from config import BITRIX_DOMAIN, BITRIX_TOKEN
from typing import List, Dict

# ---------- –†–∞–±–æ—Ç–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ —Å—Ç–∞–¥–∏—è–º–∏ ----------

def get_deal_categories() -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–≤–æ—Ä–æ–Ω–∫–∏) —Å–¥–µ–ª–æ–∫ –∏–∑ Bitrix24 —á–µ—Ä–µ–∑ crm.category.list"""
    url = f"https://{BITRIX_DOMAIN}/rest/1/{BITRIX_TOKEN}/crm.category.list.json"
    params = {"entityTypeId": 2}
    response = requests.get(url, params=params)
    response.raise_for_status()
    return response.json().get("result", {}).get("categories", [])

def get_pipelines() -> Dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –≤–æ—Ä–æ–Ω–∫–∏ –∏ —Å—Ç–∞–¥–∏–∏ —Å–¥–µ–ª–æ–∫ –∏–∑ Bitrix24"""
    categories = get_deal_categories()
    pipelines = {}
    for category in categories:
        category_id = str(category["id"])
        pipelines[category_id] = {
            "NAME": category["name"],
            "STAGES": get_stages_for_category(category_id)
        }
    return pipelines

def get_stages_for_category(category_id: str) -> Dict:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞–¥–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    url = f"https://{BITRIX_DOMAIN}/rest/1/{BITRIX_TOKEN}/crm.status.list.json"
    params = {"filter[ENTITY_ID]": f"DEAL_STAGE_{category_id}"}
    response = requests.get(url, params=params)
    response.raise_for_status()
    stages = {}
    for stage in response.json().get("result", []):
        stages[stage["STATUS_ID"]] = {"NAME": stage["NAME"]}
    return stages

def get_stages_map(pipeline_id: str) -> Dict[str, str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å stage_id -> stage_name –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞"""
    pipelines = get_pipelines()
    stages_map = {}
    pipeline = pipelines.get(pipeline_id)
    if not pipeline:
        return stages_map
    for stage_id, stage_data in pipeline.get("STAGES", {}).items():
        stages_map[stage_id] = stage_data.get("NAME", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    return stages_map

# ---------- –°—Ç–∞—Ç—É—Å—ã —Å–¥–µ–ª–æ–∫ (—Ü–≤–µ—Ç–∞/–∏–∫–æ–Ω–∫–∏) ----------

def get_status_style(stage_name: str) -> tuple[str, str]:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–≤–µ—Ç –∏ –∏–∫–æ–Ω–∫—É –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞"""
    stage_name_lower = stage_name.lower()
    if any(word in stage_name_lower for word in ["–Ω–æ–≤", "—Å–æ–∑–¥–∞–Ω"]):
        return "bg-blue-50 text-blue-700 border-blue-200", "üìù"
    elif any(word in stage_name_lower for word in ["–ø–æ–¥–≥–æ—Ç–æ–≤–∫", "–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω"]):
        return "bg-yellow-50 text-yellow-700 border-yellow-200", "‚öôÔ∏è"
    elif any(word in stage_name_lower for word in ["–æ–ø–ª–∞—Ç", "—Å—á–µ—Ç"]):
        return "bg-orange-50 text-orange-700 border-orange-200", "üí∞"
    elif any(word in stage_name_lower for word in ["–≤—ã–ø–æ–ª–Ω–µ–Ω", "–≤ —Ä–∞–±–æ—Ç–µ"]):
        return "bg-indigo-50 text-indigo-700 border-indigo-200", "üöÄ"
    elif any(word in stage_name_lower for word in ["–∑–∞–≤–µ—Ä—à–µ–Ω", "–≤—ã–∏–≥—Ä–∞–Ω"]):
        return "bg-green-50 text-green-700 border-green-200", "‚úÖ"
    elif any(word in stage_name_lower for word in ["–ø—Ä–æ–∏–≥—Ä–∞–Ω", "–æ—Ç–∫–ª–æ–Ω–µ–Ω"]):
        return "bg-red-50 text-red-700 border-red-200", "‚ùå"
    else:
        return "bg-gray-50 text-gray-700 border-gray-200", "üìù"

# ---------- –°–¥–µ–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ----------

def get_deals(contact_id: str, closed_filter: str = None) -> List[Dict]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–¥–µ–ª–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    params = {
        "filter[CONTACT_ID]": contact_id,
        "select[]": ["ID", "TITLE", "STAGE_ID", "OPPORTUNITY", "DATE_CREATE", "CATEGORY_ID"],
        "order[DATE_CREATE]": "DESC",
    }
    if closed_filter:
        params["filter[CLOSED]"] = closed_filter

    response = requests.get(
        f"https://{BITRIX_DOMAIN}/rest/1/{BITRIX_TOKEN}/crm.deal.list.json",
        params=params,
    )
    response.raise_for_status()
    return response.json().get("result", [])